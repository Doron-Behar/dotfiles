# {{{1 ls
if _command_exists ls; then
	alias ls='ls --color=auto'
	alias cls='ls --color=always'
fi

# {{{1 dir / vdir
if _command_exists dir; then
	alias dir='dir --color=auto'
	alias vdir='vdir --color=auto'
	alias cdir='dir --color=always'
	alias cvdir='vdir --color=always'
fi

# {{{1 grep
if _command_exists grep; then
	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
	alias cgrep='grep --color=always'
	alias cfgrep='fgrep --color=always'
	alias cegrep='egrep --color=always'
fi

# {{{1 diff
if _command_exists diff; then
	alias diff='diff --color=auto'
	alias cdiff='diff --color=always'
fi

# {{{1 pacman
if _command_exists pacman; then
	alias cpacman='pacman --color=always'
fi

# {{{1 taskwarrior
if _command_exists task; then
	alias tw=task
	alias t=task
	alias ct='task rc._forcecolor=on'
fi

# {{{1 auracle (the best AUR helper)
if _command_exists auracle; then
	alias aur=auracle
	alias caur=auracle\ --color=always
	alias aurs=auracle\ search
	alias caurs=auracle\ --color=always\ search
	alias auri=auracle\ search
	alias cauri=auracle\ --color=always\ search
fi

# {{{1 xdg-open
if _command_exists rifle; then
	alias o='rifle'
elif _command_exists xdg-open; then
	alias o='xdg-open'
fi

# {{{1 xclip / xsel
if _command_exists xclip; then
	alias cxclip="xclip -selection clipboard"
	alias pxclip="xclip -selection primary"
elif _command_exists xsel; then
	alias cxsel='xsel -b'
	alias pxsel='xsel -p'
fi

# {{{1 colored cat: src-highlite
if _command_exists bat; then
	alias ccat='bat --style=plain --color=always --pager=never'
elif _command_exists highlight; then
	alias ccat='highlight --out-format=ansi --force --stdout'
fi

# {{{1 always colored jq
if _command_exists jq; then
	alias cjq='jq --color-output'
fi

# {{{1 systemd related
if _command_exists systemctl; then
	alias poweroff='systemctl poweroff'
	alias reboot='systemctl reboot'
	alias syu='systemctl --user'
	alias syut='systemctl --user start'
	alias syup='systemctl --user stop'
	alias syur='systemctl --user restart'
	alias syus='systemctl --user status'
	alias sys='sudo systemctl'
	alias syst='sudo systemctl start'
	alias sysp='sudo systemctl stop'
	alias sysr='sudo systemctl restart'
	alias syss='sudo systemctl status'
fi
# {{{1 visual/editor with GhostStart for quick launch
alias gvi="${VISUAL} +GhostStart"

# {{{1 visual/editor with Pad plugin for quick launch
alias pad="${VISUAL} +Pad\ new"
alias v="${VISUAL}"

# {{{1 rclone workaround for https://github.com/ncw/rclone/issues/2894
if _command_exists rclone; then
	alias rclone='rclone --exclude-if-present .rclone-ignore'
fi
# {{{1 alias for urls
if _command_exists grep; then
	alias urls='grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*"'
fi

# {{{1 shortcut for launching GNU Octave with --no-gui
if _command_exists octave; then
	alias oct='octave --no-gui'
fi

# {{{1 Shortcut for python debugger
if _command_exists python; then
	alias pdb='python -m pdb '
fi

# {{{1 Shortcut for transmission-remote with authentication through environment
if _command_exists transmission-remote; then
	alias trc='transmission-remote --authenv'
fi

# {{{1 replace shell script pass with gopass
if _command_exists gopass; then
	alias pass=gopass
fi

# {{{1 Load local configuration files based on hostname
if [[ -f "$HOME/.local/share/zsh/aliases/${TERM}" ]]; then
	source "$HOME/.local/share/zsh/aliases/${TERM}"
fi
if [[ -f "$HOME/.local/share/zsh/aliases/${DISPLAY}" ]]; then
	source "$HOME/.local/share/zsh/aliases/${DISPLAY}"
fi
if [[ -f "$HOME/.local/share/zsh/aliases/${VENDOR}" ]]; then
	source "$HOME/.local/share/zsh/aliases/${VENDOR}"
fi
if [[ -f "$HOME/.local/share/zsh/aliases/${OSTYPE}" ]]; then
	source "$HOME/.local/share/zsh/aliases/${OSTYPE}"
fi
if [[ -f "$HOME/.local/share/zsh/aliases/${HOST}" ]]; then
	source "$HOME/.local/share/zsh/aliases/${HOST}"
fi
if [[ -f "$HOME/.local/share/zsh/aliases/${FQDN}" ]]; then
	source "$HOME/.local/share/zsh/aliases/${FQDN}"
fi
if [[ -f "$HOME/.local/share/zsh/aliases/${DOMAIN}" ]]; then
	source "$HOME/.local/share/zsh/aliases/${DOMAIN}"
fi

# {{{1 modeline
# vim:ft=sh:foldmethod=marker

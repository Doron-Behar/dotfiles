if ! _command_exists task; then
	return
fi

# `task context` wrapper with support for env variable TCS silencing it.
function _task_context_normal() {
	task context "$@"
}
function _task_context_silent() {
	task context "$@" > /dev/null
}

# global variables for this function
# ==================================
#
# This one holds all the directories exactly as written in the contexts file so
# they could be matched against PWD vs $(pwd -P) and only if no match is found,
# we update the contexts file with the `readlink` equivalents
_chpwd_taskwarrior_parent_dirs=()
# for the current context
_chpwd_taskwarrior_context=""
# for the current context options (currently, only 'redirect-link' is read)
_chpwd_taskwarrior_context_options=()
# for skipping setting the context when we dive into a recursive cd because of cd $(pwd -P)
_chpwd_skip_setting_context=0
_chpwd_set_task_context(){
	if (( $_chpwd_skip_setting_context )); then
		_chpwd_skip_setting_context=0
		return
	fi
	local setter=_task_context_normal
	if (($TSC)); then
		setter=_task_context_silent
	fi
	_chpwd_task_contexts_parser ~/.local/share/tasks/contexts.txt
	local realpwd
	if [[ -h "$PWD" ]]; then
		realpwd="$(pwd -P)"
	fi
	if [[ ! -z "$_chpwd_taskwarrior_context_options" ]]; then
		local context_opt
		unset GIT_SEND_MAIL_TO
		for context_opt in "${_chpwd_taskwarrior_context_options[@]}"; do
			if [[ "$context_opt" == "redirect-link" && ! -z "$realpwd" ]]; then
				echo redirect link
				_chpwd_skip_setting_context=1
			fi
			if [[ "$context_opt" =~ "patches_mailing_list=" ]]; then
				export GIT_SEND_MAIL_TO="${context_opt#patches_mailing_list\=}"
			fi
		done
	fi
	if [[ -n "$realpwd" ]]; then
		local roots update_symlink
		update_symlink=1
		for root in "${_chpwd_taskwarrior_parent_dirs[@]}"; do
			if [[ "${realpwd}" =~ "${root}" ]]; then
				update_symlink=0
				break
			fi
		done
		if (($update_symlink)); then
			echo _chpwd_set_task_context: updating symlink in contexts file
			sed -i -e "s#$PWD#$realpwd $PWD#g" ~/.local/share/tasks/contexts.txt
		fi
	fi
	$setter "$_chpwd_taskwarrior_context"
	if (($_chpwd_skip_setting_context)); then
		cd "$realpwd"
	fi
}

function _chpwd_task_contexts_parser() {
	local line name directories dir last_dir
	_chpwd_taskwarrior_context=""
	while IFS="$DEFAULT_IFS" read line; do
		if [[ ! "$line" =~ "context\.[-_a-zA-Z0-9\.]*=.*\# /" ]]; then
			continue
		fi
		name="${${line#context.}%%=*}"
		directories=(${(z)line#*\# })
		_chpwd_taskwarrior_context_options=()
		_chpwd_taskwarrior_parent_dirs=()
		local found_context=0
		last_dir="${directories[-1]}"
		if [[ "${last_dir}" =~ "^options:" ]]; then
			_chpwd_taskwarrior_context_options=(${(@s:,:)last_dir#options:})
		fi
		for dir in "${directories[@]}"; do
			if [[ -d "$dir" ]]; then
				_chpwd_taskwarrior_parent_dirs+=("$dir")
			fi
			if [[ "$PWD" =~ "$dir" ]]; then
				_chpwd_taskwarrior_context="$name"
				found_context=1
			fi
		done
		if (( $found_context )); then
			break
		fi
	done < "$1"
	if [[ -z "${_chpwd_taskwarrior_context}" ]]; then
		unset _chpwd_taskwarrior_context_options 
		unset _chpwd_taskwarrior_parent_dirs
		if [[ "${NETWORK_NAME}" == "Home" ]]; then
			_chpwd_taskwarrior_context=home
		else
			_chpwd_taskwarrior_context=default
		fi
	fi
}

typeset -ag chpwd_functions
chpwd_functions+=_chpwd_set_task_context
_chpwd_set_task_context

# vim:ft=zsh

# history widget - complete commands
fzf-complete-history-commands() {
	local num=$(_fzf_complete_hsub)
	zle vi-fetch-history -n $num
	zle reset-prompt
	return $ret
}
zle -N fzf-complete-history-commands

# fzf-completion widget
fzf-complete() {
	local mode="${1:-generic}"
	local tokens cmd prefix trigger tail lbuf
	setopt localoptions noshwordsplit noksh_arrays noposixbuiltins
	# http://zsh.sourceforge.net/FAQ/zshfaq03.html
	# http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
	tokens=(${(z)LBUFFER})
	if [ ${#tokens} -lt 1 ]; then
		zle expand-or-complete
		return
	fi
	cmd=${tokens[1]}
	# Explicitly allow for empty trigger.
	trigger=${FZF_COMPLETION_TRIGGER-'**'}
	[ -z "$trigger" -a ${LBUFFER[-1]} = ' ' ] && tokens+=("")
	tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))}
	if [ ${#tokens} -gt 1 -a "$tail" = "$trigger" ]; then
		[ -z "$trigger"      ] && prefix=${tokens[-1]} || prefix=${tokens[-1]:0:-${#trigger}}
		[ -z "${tokens[-1]}" ] && lbuf=$LBUFFER        || lbuf=${LBUFFER:0:-${#tokens[-1]}}
		if type _fzf_complete_${cmd} > /dev/null && [[ "$mode" != macro ]]; then
			LBUFFER="$lbuf$(_fzf_complete_${cmd} "${lbuf}" "${prefix}")"
		else
			if [[ "$mode" == "macro" ]]; then
				for key val in ${(kv)_fzf_macros}; do
					if [[ "$key" == "$prefix" ]]; then
						if [[ "$val" =~ "/$" ]]; then
							LBUFFER="$lbuf$(_fzf_complete_path "${lbuf}" "${val}" files)"
						else
							LBUFFER="${lbuf}${val}"
						fi
						return 0
					fi
				done
				zle complete-macros
			elif [[ "$mode" == "history-words" ]]; then
				# for information about the `uq` command in this pipe, see
				# https://github.com/lostutils/uq
				local selected=($(printf '%s\n' ${(z)historywords} | uq | fzf -m \
					--query="${prefix}" \
				))
				LBUFFER="${lbuf}$selected"
			else
				LBUFFER="$lbuf$(_fzf_complete_path "${lbuf}" "${prefix}" "$mode")"
			fi
		fi
		zle reset-prompt
	fi
}

function(){
	local mode
	for mode in generic files directories macro history-{paths,words} git-all-files git-changed-files; do
		eval "fzf-complete-$mode(){ fzf-complete $mode; }; zle -N fzf-complete-$mode"
	done
}

show-macros() {
	local comp_message=""
	for key val in ${(kv)_fzf_macros}; do
		comp_message="${comp_message}${key}"$'\t'"${val}"$'\n'
	done
	compadd -x "$comp_message"
}
zle -C complete-macros expand-or-complete show-macros

# vim:ft=zsh

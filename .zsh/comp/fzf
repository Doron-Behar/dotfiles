# helper for path completion that saves the selections from fzf in a history file
# and it outputs the name as was given as well. It works using stdin
history-appender(){
	local p
	while read p; do
		echo "$p"
		if [[ "$p" =~ '^./' ]]; then
			p="${PWD}/${p[$MEND+1,${#p}]}"
		fi
		echo "$p" >> ~/.zsh-fzf-path-completion-history
	done
}

# create a simpler and lighter directory fzf completion
_fzf_complete_path() {
	local lbuf="$1"
	local prefix="$2"
	local mode="$3"  # string - `files` or `directories`
	local path_prefix
	if [[ "${prefix}" =~ "/" ]]; then
		path_prefix="${prefix%/*}/"
		prefix="${prefix##*/}"
	else
		path_prefix="./"
	fi
	# substiture ~ to $HOME in path_prefix
	path_prefix="${path_prefix/#\~/$HOME}"
	# remove \ when it is intended to quote special characters
	path_prefix="${path_prefix//\\/}"
	local query="${prefix//*\//}"
	local real_opts=("$path_prefix")
	if [[ "$mode" == "directories" ]]; then
		local opts=("${path_prefix}"*(-/N))
		if [ ! -z "$opts" ]; then
			real_opts=("${opts[@]/%//}")
		fi
	elif [[ "$mode" == "files" ]]; then
		local opts=("${path_prefix}"*(N))
		local opt
		for opt in "${opts[@]}"; do
			if [[ -d "${opt}" ]]; then
				real_opts+=("${opt}/")
			else
				real_opts+=("${opt}")
			fi
		done
	fi
	if [ -z "$real_opts" ]; then
		echo "$prefix"
		return 0
	fi
	local matches=(${(f)"$(printf '%s\n' "${real_opts[@]}" | fzf --query="${query}" -m --preview='pistol {}' | history-appender)"})
	if [ -z "$matches" ]; then
		echo "$prefix"
		return 0
	fi
	echo ${(@q)matches}
	return 0
}

# complete files from history file
_fzf_complete_path_history() {
	local lbuf="$1"
	local prefix="$2"
	local matches=(${(f)"$(fzf --query="${query}" -m --preview='pistol {}' < ~/.zsh-fzf-path-completion-history)"})
	if [ -z "$matches" ]; then
		echo "$prefix"
		return 0
	fi
	echo ${(@q)matches}
}

# make sure cd is completed with the default fzf-completion widget with _fzf_complete_dir
_fzf_complete_cd() {
	_fzf_complete_path "$@" "directories"
}

# gopass and pass passwords
_fzf_complete_gopass() {
	local prefix="$2"
	local match="$(gopass list --flat | fzf --query="${prefix}")"
	[ -z "$match" ] && return 1
	echo "${match}"
}
_fzf_complete_pass() {
	_fzf_complete_gopass "$@"
}

# export (zsh's built-in)
_fzf_complete_export() {
	local lbuf="$1"
	local prefix="$2"
	local matches=(${(f)"$(declare -x | fzf --query="${prefix}" --preview='eval echo \${}')"})
	[ -z "$matches" ] && return 1
	echo "${matches[@]//=*/}"
}

# unset (zsh's built-in)
_fzf_complete_unset() {
	_fzf_complete_export "$@"
}

# unalias (zsh's built-in)
_fzf_complete_unalias() {
	local lbuf="$1"
	local prefix="$2"
	local aliases=(${(f)"$(alias)"})
	local matches=($(printf '%s\n' ${aliases[@]//=*/} | fzf --query="${prefix}"))
	[ -z "$matches" ] && return 1
	echo "${matches[@]//=*/}"
}

# kill
_fzf_complete_kill() {
	local lbuf="$1"
	local prefix="$2"
	local matches=(${(f)"$(command ps -ef | sed 1d | fzf -m -q "$prefix" --height "50%" --min-height 15 --reverse --preview 'echo {}' --preview-window down:3:wrap)"})
	[ -z "$matches" ] && return 1
	local match_line line_parts pids
	for match_line in ${matches[@]}; do
		line_parts=(${(s: :)match_line})
		pids+=(${line_parts[2]})
	done
	echo "${pids[@]}"
}

# juf and jsf shell functions
_fzf_complete_journal(){
	local lbuf="$1"
	local prefix="$2"
	local mode="$3"  # string - `user` or `system`
	local systemctl_cmd
	if [[ "$mode" == "user" ]]; then
		systemctl_cmd='systemctl --user'
	else
		systemctl_cmd='systemctl'
	fi
	local unit load active sub description
	local units
	local first_iteration=1 break_larger_loop=0
	eval $systemctl_cmd list-units --plain --all | while read unit load active sub description; do
		if (($first_iteration)); then
			first_iteration=0
			continue
		fi
		for field in "$unit" "$load" "$active" "$sub" "$description"; do
			if [[ ! -z "$field" ]]; then
				units+=("$unit")
				break
			else
				if [[ "$description" == "$field" ]]; then
					break_larger_loop=1
				fi
			fi
		done
		if (($break_larger_loop)); then
			break
		fi
	done
	local matches=($(printf '%s\n' "${units[@]}" | fzf -m --query="${prefix}" --preview="$systemctl_cmd status {}"))
	[ -z "$matches" ] && return 1
	echo "${matches[@]}"
}
_fzf_complete_juf(){
	_fzf_complete_journal "$@" user
}
_fzf_complete_jsf(){
	_fzf_complete_journal "$@" system
}

# man pages
_fzf_complete_man(){
	local lbuf="$1"
	local prefix="$2"
	local name section dash description
	local matches=($(man -k . | fzf -m --query="${prefix}" | while read -r name section dash description; do
		echo "-s${${section#\(}%\)} $name"
	done))
	[ -z "$matches" ] && return 1
	echo "${matches[@]}"
}

# taskwarrior
_fzf_complete_task(){
	local lbuf="$1"
	local prefix="$2"
	if [[ "$prefix" =~ "^[-+]" ]]; then
		# complete tags
		local matches=($(command task _tags | fzf -m --query="${${prefix#+}#-}"))
		[ -z "$matches" ] && return 1
		local common_prefix="${prefix//[^-+]*/}"
		echo "${matches[@]/#/${common_prefix}}"
	elif [[ "$prefix" =~ "^project:" ]]; then
		# complete project
		local match=$(command task _project | fzf --query="${prefix#project:}")
		[ -z "$match" ] && return 1
		local common_prefix="project:"
		echo "${match/#/${common_prefix}}"
	else
		# complete task
		local matches=(${(f)"$(eval $lbuf _zshids | fzf -m --query="${prefix}")"})
		[ -z "$matches" ] && return 1
		echo "${matches[@]//:*/}"
	fi
}

_fzf_complete_t(){
	_fzf_complete_task "$@"
}

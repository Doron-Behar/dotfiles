# `task context` wrapper with support for env variable TCS silencing it.
function _task_context_normal() {
	task context "$@"
}
function _task_context_silent() {
	task context "$@" > /dev/null
}

# global variables for this function
# for saving after contexts parsing alternative directories where the same context applies
# Note: we use it mostly to check whether a symlink to PWD is in that list, and if not,
# we add it in the context file
_chpwd_taskwarrior_alternatives=()
# for the current context
_chpwd_taskwarrior_context=""
# for the current context options (currently, only 'redirect-link' is read)
_chpwd_taskwarrior_context_options=""
# for skipping setting the context when we dive into a recursive cd because of cd $(pwd -P)
_chpwd_skip_setting_context=0
_task_context(){
	local setter=_task_context_normal
	if (($TSC)); then
		setter=_task_context_silent
	fi
	_contexts_parser ~/.local/share/tasks/contexts.txt
	local realpwd
	if [[ -h "$PWD" ]]; then
		realpwd="$(pwd -P)"
	fi
	if [[ ! -z "$_chpwd_taskwarrior_context_options" ]]; then
		local context_opt
		for context_opt in "${_chpwd_taskwarrior_context_options[@]}"; do
			if [[ "$context_opt" == "redirect-link" && ! -z "$realpwd" ]]; then
				echo redirect link
				_chpwd_skip_setting_context=1
			fi
		done
	fi
	if [[ ! -z "$realpwd" ]]; then
		local alternative no_update_symlink
		no_update_symlink=1
		for alternative in "${_chpwd_taskwarrior_alternatives[@]}"; do
			if [[ "$realpwd" == "$alternative" ]]; then
				no_update_symlink=0
			fi
		done
		if (($no_update_symlink)); then
			echo _task_context: updating symlink in contexts file
			# make sure the real PWD is matched first!
			sed -i -e "s#$PWD#$realpwd $PWD#g" ~/.local/share/tasks/contexts.txt
		fi
	fi
	$setter "$_chpwd_taskwarrior_context"
	if (($_chpwd_skip_setting_context)); then
		cd "$realpwd"
	fi
}

function _contexts_parser() {
	local line name directories dir last_dir
	_chpwd_taskwarrior_context=""
	while IFS="$DEFAULT_IFS" read line; do
		if [[ ! "$line" =~ "context\.[-_a-zA-Z0-9\.]*=.*\# /" ]]; then
			continue
		fi
		name="${${line#context.}%=*}"
		directories=(${(z)line#*\# })
		unset _chpwd_taskwarrior_context_options
		unset _chpwd_taskwarrior_alternatives
		_chpwd_taskwarrior_alternatives=()
		last_dir="${directories[-1]}"
		if [[ "${directories[-1]}" =~ "^options:" ]]; then
			_chpwd_taskwarrior_context_options=(${(@s:,:)last_dir#options:})
		fi
		for dir in "${directories[@]}"; do
			if [[ "$PWD" =~ "$dir" ]]; then
				_chpwd_taskwarrior_context="$name"
				return
			elif [[ -d "$dir" ]]; then
				_chpwd_taskwarrior_alternatives+=("$dir")
			fi
		done
	done < "$1"
	if [[ -h "$PWD" ]]; then
		_chpwd_taskwarrior_alternatives=("$(pwd -P)")
	fi
	if [[ ${_HACKING_FROM_HOME} == true ]]; then
		_chpwd_taskwarrior_context=home
	else
		_chpwd_taskwarrior_context=default
	fi
}

function chpwd() {
	if (( ! $_chpwd_skip_setting_context )); then
		_task_context
	else
		_chpwd_skip_setting_context=0
	fi
}
chpwd

#!/usr/bin/env python
"""Ranger command line utility for managing the bookmarks
"""

from __future__ import (absolute_import, division, print_function)

# Normal imports
from argparse import ArgumentParser
import os
import sys

from ranger.container.bookmarks import Bookmarks


def confirm(prompt=None, resp=False):
    """prompts for yes or no response from the user. Returns True for yes and
    False for no.

    'resp' should be set to the default value assumed by the caller when
    user simply types ENTER.

    >>> confirm(prompt='Create Directory?', resp=True)
    Create Directory? [y]|n:
    True
    >>> confirm(prompt='Create Directory?', resp=False)
    Create Directory? [n]|y:
    False
    >>> confirm(prompt='Create Directory?', resp=False)
    Create Directory? [n]|y: y
    True

    """

    if prompt is None:
        prompt = 'Confirm'

    if resp:
        prompt = '%s [%s]/%s: ' % (prompt, 'y', 'n')
    else:
        prompt = '%s [%s]/%s: ' % (prompt, 'n', 'y')

    while True:
        ans = input(prompt)
        if not ans:
            return resp
        if ans not in ['y', 'Y', 'n', 'N']:
            print('please enter y or n.', file=sys.stderr)
            continue
        if ans == 'y' or ans == 'Y':
            return True
        if ans == 'n' or ans == 'N':
            return False


def main():
    """
    main
    """
    argp = ArgumentParser(
        description="Ranger bookmark manager for the command line"
    )
    argp.add_argument(
        '-l', '--list',
        action='store_true',
        help='print the available bookmarks'
    )
    argp.add_argument(
        '-s', '--set',
        metavar='<key>',
        nargs=1,
        help='Bookmark the current directory for key <key>'
    )
    argp.add_argument(
        'key',
        default="'",
        metavar='<key>',
        nargs='?',
        help='print the directory the key <key> bookmark corresponding to',
    )
    argp.add_argument(
        '-f', '--file',
        default=(
            (
                os.environ.get('XDG_CONFIG_HOME') or os.environ.get('HOME') +
                "/.config"
            ) + "/ranger/bookmarks"
        ),
        metavar='BOOKMARKS_FILE',
        nargs=1,
        help='Use the specified bookmarks file instead of the default'
    )

    args = argp.parse_args()
    bmarks = Bookmarks(args.file)
    bmarks.load()
    if args.list:
        for bookmark in list(bmarks.dct.items()):
            print(bookmark[0] + "\t" + bookmark[1])
    elif args.set:
        key = args.set[0]
        try:
            exists = bmarks.__getitem__(key)
            if not confirm('remove bookmark for {}?'.format(exists), 'y'):
                sys.exit(0)
        except KeyError:
            pass
        bmarks.__setitem__(args.set[0], os.getcwd())
        bmarks.save()
    else:
        try:
            print(bmarks.__getitem__(args.key))
        except KeyError:
            print('no such bookmark', file=sys.stderr)


if __name__ == '__main__':
    main()
